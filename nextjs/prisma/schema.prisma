generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                         String  @id
  contact                    String  @unique
  cosigner                   String?
  date_of_birth              String?
  license_number             String  @unique
  license_expiration         String?
  date_added                 String? @default(dbgenerated("CURRENT_TIMESTAMP"))
  date_modified              String? @default(dbgenerated("CURRENT_TIMESTAMP"))
  current_standing           String?
  notes                      String?
  person                     Person  @relation(fields: [contact], references: [id], onDelete: Cascade)
  deal_deal_accountToaccount Deal[]  @relation("deal_accountToaccount")

  @@unique([contact, cosigner], map: "unique_primary_secondary")
  @@map("account")
}

model Charge {
  id              String          @id
  name            String
  amount          String
  date_effective  String
  deal_charges    DealCharge[]    @relation("deal_charge_chargeTocharge")
  default_charges DefaultCharge[] @relation("default_charge_chargeTocharge")

  @@unique([name, amount])
  @@map("charge")
}

model city {
  id           String @id
  city         String
  state        String
  zip          String
  abbreviation String

  @@unique([city, state], map: "unique_city_state")
  @@index([state(sort: Desc)], map: "i_city_state")
}

model Creditor {
  id              String          @id
  business_name   String          @unique
  contact         String
  filing_fees     String
  date_added      String?         @default(dbgenerated("CURRENT_TIMESTAMP"))
  date_modified   String?         @default(dbgenerated("CURRENT_TIMESTAMP"))
  apr             String          @default("10")
  person          Person          @relation(fields: [contact], references: [id], onDelete: Cascade)
  deals           Deal[]          @relation("deal_creditorTocreditor")
  default_charges DefaultCharge[] @relation("default_charge_creditorTocreditor")

  @@unique([business_name, contact], map: "unique_business_contact")
  @@map("creditor")
}

model Deal {
  id           String         @id
  state        Int            @default(1)
  date         String
  account      String
  inventoryId  String         @map("inventory")
  creditor     String?
  cash         String
  down         String?        @default(dbgenerated("0"))
  apr          String
  finance      String?
  lien         String?
  pmt          String?
  term         String
  tax_city     String?
  tax_state    String?
  tax_county   String?
  tax_rtd      String?
  Account     Account        @relation("deal_accountToaccount", fields: [account], references: [id], onDelete: Cascade)
  creditors    Creditor?      @relation("deal_creditorTocreditor", fields: [creditor], references: [id], onDelete: Cascade, onUpdate: SetNull)
  inventory    Inventory      @relation(fields: [inventoryId], references: [vin], onDelete: Cascade)
  dealCharges  DealCharge[]   @relation("deal_charge_dealTodeal")
  dealSalesmen DealSalesman[] @relation("deal_salesman_dealTodeal")
  dealTrades   DealTrade[]    @relation("deal_trade_dealTodeal")
  payments     Payment[]      @relation("payment_dealTodeal")

  @@unique([date, account, inventoryId], map: "date_account_inventory")
  @@map("deal")
}

model DealCharge {
  deal    String?
  charge  String?
  date    String?
  note    String?
  id      String  @id
  charges Charge? @relation("deal_charge_chargeTocharge", fields: [charge], references: [id], onDelete: Cascade)
  deals   Deal?   @relation("deal_charge_dealTodeal", fields: [deal], references: [id], onDelete: Cascade)

  @@unique([deal, charge], map: "deal_charge_deal_charge_uindex")
  @@map("deal_charge")
}

model DealSalesman {
  id       String   @id
  deal     String
  salesman String
  Deals    Deal     @relation("deal_salesman_dealTodeal", fields: [deal], references: [id], onDelete: Cascade)
  Salesman Salesman @relation("deal_salesman_salesmanTosalesman", fields: [salesman], references: [person], onDelete: Cascade)

  @@unique([deal, salesman])
  @@map("deal_salesman")
}

model DealTrade {
  id                         String    @id
  deal                       String
  vin                        String
  value                      String
  deal_deal_trade_dealTodeal Deal      @relation("deal_trade_dealTodeal", fields: [deal], references: [id], onDelete: Cascade)
  inventory                  Inventory @relation(fields: [vin], references: [vin], onDelete: Cascade)

  @@unique([deal, vin])
  @@map("deal_trade")
}

model DefaultCharge {
  id                                         String   @id
  creditor                                   String
  charge                                     String
  charge_default_charge_chargeTocharge       Charge   @relation("default_charge_chargeTocharge", fields: [charge], references: [id], onDelete: Cascade)
  creditor_default_charge_creditorTocreditor Creditor @relation("default_charge_creditorTocreditor", fields: [creditor], references: [business_name], onDelete: Cascade)

  @@unique([creditor, charge])
  @@map("default_charge")
}

model Inventory {
  id            String      @id
  vin           String      @unique
  year          String
  make          String
  model         String?
  body          String?
  color         String?
  fuel          String?
  cwt           String?
  mileage       String?
  date_added    String?     @default(dbgenerated("CURRENT_TIMESTAMP"))
  date_modified String?     @default(dbgenerated("CURRENT_TIMESTAMP"))
  picture       String?
  cash          String?
  credit        String?
  down          String?
  state         Int         @default(1)
  deal          Deal[]
  trades        DealTrade[]

  @@map("inventory")
}

model Payment {
  id                      String @id
  deal                    String
  date                    String @default(dbgenerated("CURRENT_TIMESTAMP"))
  amount                  String
  deal_payment_dealTodeal Deal   @relation("payment_dealTodeal", fields: [deal], references: [id], onDelete: Cascade)

  @@unique([deal, date, amount])
  @@map("payment")
}

model Person {
  id              String     @id
  name_prefix     String?
  first_name      String
  middle_initial  String?
  last_name       String
  name_suffix     String?
  address_1       String
  address_2       String?
  address_3       String?
  city            String     @default("Fort Morgan")
  state_province  String     @default("CO")
  zip_postal      String     @default(dbgenerated("80701"))
  zip_4           String?
  country         String     @default("US")
  phone_primary   String
  phone_secondary String?
  phone_tertiary  String?
  email_primary   String?
  email_secondary String?
  account         Account?
  creditors       Creditor[]
  salesman        Salesman?  @relation("salesman_personToperson")

  @@unique([last_name, first_name, address_1], map: "last_first_address")
  @@map("person")
}

model Salesman {
  id             String         @id
  person         String         @unique
  dealSalesmen   DealSalesman[] @relation("deal_salesman_salesmanTosalesman")
  salesmanPerson Person         @relation("salesman_personToperson", fields: [person], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("salesman")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sqlite_master {
  type     String?
  name     String?
  tbl_name String?
  rootpage Int?
  sql      String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sqlite_sequence {
  name BigInt?
  seq  BigInt?

  @@ignore
}
